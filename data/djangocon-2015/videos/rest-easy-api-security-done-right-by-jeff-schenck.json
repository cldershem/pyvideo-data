{
  "id": 4067,
  "category": "",
  "slug": "rest-easy-api-security-done-right-by-jeff-schenck",
  "title": "REST Easy \u2014 API Security Done Right",
  "summary": "REST Easy \u2014 API Security Done Right by Jeff Schenck\n\nWhy REST More and more of our web development is shifting to frontend\nweb frameworks like Angular, Ember, and Backbone. And this is great!\nThese frameworks can provide an amazing, responsive, beautiful\nexperience to our users \u2014 and the only price we pay is having to write\nJavaScript. Well, having to write JavaScript and having to maintain a\nseriously robust, battle-hardened API for the frontend framework to talk\nto.\n\nState of REST Django REST Framework has clearly broken away with a ton\nof momentum, and with good reason. It's a solid framework, and the tools\nit provides right out of the box \u2014 serialization, validation, nested\nrelationships \u2014 are splendid. It even provides basic authentication and\nauthorization baked right in, which works great in the very simple\ncases.\n\nHowever, when you start encountering slightly more complicated API\npermission setups, things start to get messy.\n\nREST Security There's a big tectonic shift when trading in your\ntraditional request-response-Django site for a\nfrontend-framework-API-Django site. Your application logic used to\nreside almost entirely server-side, but now it's split \u2014 half\nserver-side, half browser-side. And the trick with browser-side code is\nit runs in a completely untrusted environment. So we're faced with a\nmuch more complicated security situation to batten down.\n\nYou need different authentication strategies: session auth, JWT token\nauth, API keys, signed URLs, and combinations thereof. You have\ndifferent permission strategies: table-level, row-level, column-level,\nand combinations thereof. It gets real complicated.\n\nREST Easy I'll show how to use the tools at our disposal \u2014 Django groups\nand permissions, REST Frameworks's permission classes, third-party\nlibraries \u2014 to cobble together a passable security setup for your API.\nYou'll get plenty of code samples, detailing the kinds of setups we put\ntogether for our site and the custom tooling we built to do it.\n\nNext-Level REST We'll end by talking about how our tools can serve us\nbetter in the future. If Django is going to have a strong place in the\nfuture of the web, we need strong tooling for building APIs. This is how\nwe'll get there.\n\nHelp us caption & translate this video!\n\nhttp://amara.org/v/HGSf/\n",
  "description": "",
  "quality_notes": "",
  "language": "English",
  "copyright_text": "",
  "thumbnail_url": "https://i.ytimg.com/vi/2LWheXmsmHg/maxresdefault.jpg",
  "duration": 1316,
  "videos": [
    {
      "length": 0,
      "url": "https://www.youtube.com/watch?v=2LWheXmsmHg",
      "type": "youtube"
    }
  ],
  "source_url": "https://www.youtube.com/watch?v=2LWheXmsmHg",
  "tags": [],
  "speakers": [
    "Jeff Schenck"
  ],
  "recorded": "2015-09-16"
}