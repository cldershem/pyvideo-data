{
  "id": 4067,
  "category": "DjangoCon 2013",
  "slug": "stateless-immutable-webapps-stealing-ideas-from",
  "title": "Stateless / Immutable Webapps - Stealing Ideas from Functional Patterns",
  "summary": "STATELESS / IMMUTABLE WEBAPPS - STEALING IDEAS FROM FUNCTIONAL PATTERNS\n\nThursday 10 a.m.--10:45 a.m.\n\nAudience level: Intermediate\n\nDESCRIPTION What would happen if we replaced Django's orm with an\nanalogous but immutable equivalent. This is where my story begins...\n\nABSTRACT This talk started after I heard a talk by Gary Bernhart at a\nconference in Chicago(SCNA). There he talked about a hypothetical\nprogramming structure that held many functional principles(SOC,\ndata-in-data-out functions, etc...), but included enough latitude to\nkeep non-functional tools and structures.\n\nSo I decided to write my next\nproject(https://github.com/MattyO/trackerCharts) in this style to see\nhow things would play out in the real world. And it turned out great.\nThis style of a \"functional core surrounded by an imperative ring\"\npushed me towards more and simpler unit tests, the ability to push back\nmany data decisions much later into the process, and a really speedy\ntest suite for little to no extra work. However, this program had no\ndatabase; being that there was so little data that it fit into a\ndocument style store so nicely, everything was held on the file system.\n\nWith the next project being written in Django instead of Flask I was\npushed into trying this structure while dealing with Django's ORM. In\nthe process of trying to turn django's ORM calls into more pure forms of\nstraight data, I wrote some code to turn turn the ORM query object into\nsomething that had an equivalent DSL, but without the ability to make\nfurther calls to the database. ORM's ended up being abstracted into a db\nmodule that returned this new type of data. Some more great things\nhappened: Data access was much easier to see in views, db integration\ntests only covered the specified uses cases in the module, what data a\nview or function actually needs is readably apparent, mocking database\ncalls become completely unnecessary (due to the makeup of the new data\nmodels), other kinda data sources were trivial to convert; so data just\nlooked like data no matter where it came from(the file system, an ORM,\nredis, mongo).\n\nI would like to share some of this journey, talk about separating data\nfrom functionality(the good times, the bad times), some of the code that\nemerged form my journey, and things we can take away from this grand\nexperiment. Thanks !! -Matt\n",
  "description": "",
  "quality_notes": "",
  "language": "English",
  "copyright_text": "",
  "thumbnail_url": "https://i.ytimg.com/vi/NGhL7IA6Dik/hqdefault.jpg",
  "duration": 1653,
  "videos": [
    {
      "length": 0,
      "url": "https://www.youtube.com/watch?v=NGhL7IA6Dik",
      "type": "youtube"
    }
  ],
  "source_url": "https://www.youtube.com/watch?v=NGhL7IA6Dik",
  "tags": [],
  "speakers": [
    "Matt ODonnell"
  ],
  "recorded": "2013-10-01"
}